library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
model <- stan_model('D:/md.stan')
library(rstan)
version
library(tidyverse)
mm <- stan_model('D:/md.stan')
mm <- stan_model('D:/md.stan')
uninstall.packages('msm')
uninstall.packages('rstan')
remove.packages('rstan')
install.packages('rstan')
library(rstan)
mm <- stan_model('D:/md.stan')
library(rstan)
ms <- stan_model('D:/md.stan')
library(rstan)
ms <- stan_model('D:/md.stan')
x <- rnormal(100, 0, 10)
ms <- stan_model('D:/md.stan')
x <- rnormal(100, 0, 10)
x <- rnorm(100, 0, 10)
df <- list(x = x, N = 100)
?sampling
a <- sampling(ms,
df,
chains = 1,
iter = 200)
a <- sampling(ms,
df,
chains = 1,
iter = 1000)
a <- sampling(ms,
df,
chains = 4,
iter = 2000)
a
install.packages('parallel')
library(parallel)
detectCores()
a <- sampling(ms,
df,
chains = 2,
cores = 2
iter = 1000)
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 1000)
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 2000)
install.packages('rstudioapi')
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 2000)
a
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 20000)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 200000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 200000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 200000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 1,
iter = 200000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 1,
iter = 200000)
end <- Sys.time()
end - start
x <- rnorm(10000, 0, 10)
N <- 10000
N <- 10000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 1,
iter = 20000)
end <- Sys.time()
end - start
N <- 100000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 1,
iter = 20000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 20000)
end <- Sys.time()
end - start
N <- 100000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 2,
iter = 20000)
end <- Sys.time()
end - start
N <- 100000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 4,
iter = 20000)
end <- Sys.time()
end - start
N <- 100000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 4,
iter = 20000)
end <- Sys.time()
end - start
start <- Sys.time()
a <- sampling(ms,
df,
chains = 2,
cores = 8,
iter = 20000)
end <- Sys.time()
end - start
N <- 100000
x <- rnorm(N, 0, 10)
df <- list(N = N, x = x)
start <- Sys.time()
a <- sampling(ms,
df,
chains = 4,
cores = 8,
iter = 20000)
end <- Sys.time()
end - start
library(cobalt)
?bal.tab
dirname(rstudioapi::getSourceEditorContext()$path)
#### Sample size calculation ####
# Preparation ----
rm(list = ls())
setwd('D:/NUS Dropbox/Xiangyuan Huang/github/')
setwd('NeCTAR/sampleSize')
# Library ----
# install.packages("brms", repos = "https://cloud.r-project.org")
library(brms)
library(doParallel)
library(magrittr)
library(tidyverse)
result <- read.csv('result/repeat.csv')
stat <- result %>% group_by(N, p1, delta) %>%
summarize(count = n(), mean = mean(est),
pass = sum(q900 < 0)) %>%
mutate(beta = pass/count,
group = as.character(p1),
delta = as.character(delta))
View(result)
# plot ----
pic <- stat %>% #filter(delta == 0.1) %>%
ggplot(data = ., aes(x = N, y = beta, group = p1)) +
geom_point() +
# geom_line(aes(col = group))
geom_smooth(aes(col = group)) +
facet_wrap(vars(delta), nrow = 2)
pic
delta <- 0.1 + (1:3)/50
delta
1/50
stat <- result %>% group_by(N, p1, delta) %>%
summarize(count = n(), mean = mean(est),
pass = sum(q950 < 0)) %>%
mutate(beta = pass/count,
group = as.character(p1),
delta = as.character(delta))
# plot ----
pic <- stat %>% #filter(delta == 0.1) %>%
ggplot(data = ., aes(x = N, y = beta, group = p1)) +
geom_point() +
# geom_line(aes(col = group))
geom_smooth(aes(col = group)) +
facet_wrap(vars(delta), nrow = 2)
pic
stat <- result %>% group_by(N, p1, delta) %>%
summarize(count = n(), mean = mean(est),
pass = sum(q975 < 0)) %>%
mutate(beta = pass/count,
group = as.character(p1),
delta = as.character(delta))
# plot ----
pic <- stat %>% #filter(delta == 0.1) %>%
ggplot(data = ., aes(x = N, y = beta, group = p1)) +
geom_point() +
# geom_line(aes(col = group))
geom_smooth(aes(col = group)) +
facet_wrap(vars(delta), nrow = 2)
pic
# Different scenarios ----
N <- 400 + (1:8)*25
p1 <- c(0.3, 0.35, 0.4)
delta <- c(0.06, 0.08, 0.1)
n_sampling <- 1000   # number of sampling in estimation
delta
stat <- result %>% group_by(N, p1, delta) %>%
summarize(count = n(), mean = mean(est),
pass = sum(q950 < 0)) %>%
mutate(beta = pass/count,
group = as.character(p1),
delta = as.character(delta))
# plot ----
pic <- stat %>% #filter(delta == 0.1) %>%
ggplot(data = ., aes(x = N, y = beta, group = p1)) +
geom_point() +
# geom_line(aes(col = group))
geom_smooth(aes(col = group)) +
facet_wrap(vars(delta), nrow = 2)
pic
